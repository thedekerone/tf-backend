generator client {
  provider = "prisma-client-js"
}

model ProjectRequest {
  id          String   @id @default(uuid())
  userId      String
  projectId   String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  Project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectInvitation {
  id          String   @id @default(uuid())
  userId      String
  projectId   String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  Project     Project  @relation(fields: [projectId], references: [id],onDelete: Cascade)
}

enum MemberType {
  MEMBER
  ADMIN
}

model Credential {
  id        String   @id @default(uuid())
  userId    String   @unique
  password  String
  User      User     @relation(fields: [userId], references: [id])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
}

model User {
  id      String          @id @default(uuid())
  name      String
  email     String          @unique
  phone     String?
  avatar    String?
  userType  UserType        @default(STUDENT)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  projects  ProjectMember[]
  skills    Skill[]
  courses   Course[]
  credentials Credential[]
  createdProjects Project[] @relation("UserCreatedProjects")
  projectRequests ProjectRequest[]
  projectInvitations ProjectInvitation[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      String
  status    String
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberType MemberType @default(MEMBER)
  User      User     @relation(fields: [userId], references: [id])
  Project   Project  @relation(fields: [projectId], references: [id],onDelete: Cascade)
}

model Project {
  id          String          @id @default(uuid())
  name        String
  teamName    String?
  description String?
  keywords    String?
  skills      String?
  maxMembers  Int?
  courseId    String
  status      String?
  creatorId   String
  Creator     User    @relation("UserCreatedProjects", fields: [creatorId], references: [id])
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  members             ProjectMember[] 
  projectRequests     ProjectRequest[]
  projectInvitations  ProjectInvitation[]
  Course              Course          @relation(fields: [courseId], references: [id])
  tags                Tag[]
}

model Course {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  tags        Tag[]
  users       User[]
  projects    Project[]
}

model Skill {
  id       String    @id @default(uuid())
  name     String    @unique
  category String?
  users    User[]
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  projects Project[]
  courses  Course[]
}
